/*
 * Estudiante: [santiago snchez mosquera]
 * Último dígito de mi ID: 1 (IMPAR)
 * Regla asignada: Para dígitos IMPARES, el método delete() debe eliminar 
 *                 la ÚLTIMA ocurrencia del valor especificado.
 */

class Node {
    Integer value;
    Node next;

    Node(Integer value) {
        this.value = value;
        this.next = null;
    }
}

class LinkedList {
    private Node head;

    // Inserta un nuevo nodo al inicio de la lista
    public void insertAtHead(Integer value) {
        Node newNode = new Node(value);
        newNode.next = head;
        head = newNode;
    }

    // Inserta un nuevo nodo después de un nodo dado
    public void insertAfter(Node previous, Node newNode) {
        if (previous == null) {
            System.out.println("Error: El nodo anterior no puede ser null.");
            return;
        }
        newNode.next = previous.next;
        previous.next = newNode;
    }

    // Devuelve el nodo en la posición 'index' (0-based)
    public Node get(int index) {
        Node current = head;
        int count = 0;
        while (current != null && count < index) {
            current = current.next;
            count++;
        }
        return current;
    }

    // MÉTODO DELETE: elimina la ÚLTIMA ocurrencia del valor dado
    // Implementado según regla para ID terminado en 1 (IMPAR)
    public void delete(Integer value) {
        if (head == null) {
            return; // Lista vacía
        }

        Node current = head;
        Node lastOccurrence = null;       
        Node lastOccurrencePrev = null;    
        Node prev = null;

        // Recorrer toda la lista para encontrar la ÚLTIMA ocurrencia
        while (current != null) {
            if (current.value.equals(value)) {
                lastOccurrence = current;
                lastOccurrencePrev = prev;
            }
            prev = current;
            current = current.next;
        }

        // Si no se encontró el valor, no hacer nada
        if (lastOccurrence == null) {
            return;
        }

        // Caso 1: La última ocurrencia es el primer nodo
        if (lastOccurrence == head) {
            head = head.next;
        } 
        // Caso 2: Está en cualquier otra posición
        else {
            lastOccurrencePrev.next = lastOccurrence.next;
        }
    }

    // Imprime la lista en formato: valor -> valor -> ... -> null
    public void printList() {
        Node current = head;
        while (current != null) {
            System.out.print(current.value + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }
}

// Clase principal para demostrar el funcionamiento
public class LinkedListDemo {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        // Construir lista inicial: 10 -> 20 -> 30 -> 40 -> 50
        list.insertAtHead(50);
        list.insertAtHead(40);
        list.insertAtHead(30);
        list.insertAtHead(20);
        list.insertAtHead(10);

        System.out.println("1. Lista original:");
        list.printList();

        // Insertar 71 después del nodo en la posición 2 (valor 30)
        Node nodeAtPos2 = list.get(2);
        if (nodeAtPos2 != null) {
            list.insertAfter(nodeAtPos2, new Node(71));
        }

        System.out.println("\n2. Después de insertar 71 después de la posición 2:");
        list.printList(); // 10 -> 20 -> 30 -> 71 -> 40 -> 50

        // Añadir otro 30 al inicio para tener dos ocurrencias
        list.insertAtHead(30);
        System.out.println("\n3. Después de insertar otro 30 al inicio (ahora hay dos 30s):");
        list.printList(); // 30 -> 10 -> 20 -> 30 -> 71 -> 40 -> 50

        //  ELIMINAR la ÚLTIMA ocurrencia de 30
        System.out.println("\n4. Eliminando la ÚLTIMA ocurrencia de 30...");
        list.delete(30);

        System.out.println("5. Lista después de delete(30):");
        list.printList(); // 30 -> 10 -> 20 -> 71 -> 40 -> 50
        //                ↑
        //        Solo queda el PRIMER 30 → ¡la última ocurrencia fue eliminada!
    }
}